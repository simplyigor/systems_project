import urllib3
import json
import os
import random
import string
import urllib.parse
import requests
import numpy as np

from database import *

TG_TOKEN = os.environ.get('BOT_TOKEN') 
URL = f"https://api.telegram.org/bot{TG_TOKEN}/"
http = urllib3.PoolManager()

# –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
def send_message(text, chat_id):
    final_text = text
    url = URL + f"sendMessage?text={final_text}&chat_id={chat_id}&parse_mode=html&disable_web_page_preview=True"
    http.request("GET", url)
    
def get_random_songs(artist):
    # –°–æ–±–∏—Ä–∞–µ–º 5 —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–µ—Å–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    api_last = os.environ.get('MUSIC_TOKEN')
    url = f"http://ws.audioscrobbler.com/2.0/?method=artist.gettoptracks&artist={artist}&api_key={api_last}&format=json"
    response = http.request("GET", url)
    data = json.loads(response.data.decode('utf-8'))
    tracks = data['toptracks']['track']
    random_songs = random.sample(tracks, 5) # –≤—ã–±–∏—Ä–∞–µ–º 5 —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–µ—Å–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
    random_songs_info = []
    # –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Å–Ω—è—Ö
    for song in random_songs:
        song_name = song['name']
        artist_name = song['artist']['name']
        url = f"http://ws.audioscrobbler.com/2.0/?method=track.getInfo&api_key={api_last}&artist={artist_name}&track={song_name}&format=json"
        response = http.request("GET", url)
        data = json.loads(response.data.decode('utf-8'))
        track_info = data['track']
        url = urllib.parse.quote_plus(track_info['url'])
        random_songs_info.append((song_name, url))
    return random_songs_info

def get_artist_info(artist):
    api_last = os.environ.get('MUSIC_TOKEN')
    url = f"http://ws.audioscrobbler.com/2.0/?method=artist.getinfo&artist={artist}&api_key={api_last}&format=json&lang=ru"
    response = http.request("GET", url)
    data = json.loads(response.data.decode('utf-8'))
    artist_info = data['artist']['bio']['summary']
    # –∑–∞–º–µ–Ω—è–µ–º <a href –Ω–∞ "—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—å—é:"
    artist_info = artist_info.replace("<a href", "\n\n–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ? –ü—Ä–æ–¥–æ–ª–∂–∏ —á—Ç–µ–Ω–∏–µ –∑–¥–µ—Å—å")
    artist_info = artist_info.replace(">Read more on Last.fm</a>", " ")
    artist_info = artist_info.replace('"', '')
    artist_info = artist_info.replace(":=", " ‚Äì ")
    artist_info = artist_info.replace("=", " ‚Äì ")
    artist_info = urllib.parse.quote_plus(artist_info)
    return artist_info

def get_genre_songs(genre_reply):
    insert_genres("genres", genre_reply)
    api_last = os.environ.get('MUSIC_TOKEN')
    url = f"http://ws.audioscrobbler.com/2.0/?method=tag.gettopartists&tag={genre_reply}&api_key={api_last}&format=json"
    response = http.request("GET", url)
    data = json.loads(response.data)
    artists = data['topartists']['artist']
    top_artists = [f"{i+1}. {artist['name']} - {urllib.parse.quote_plus(artist['url'])}\n" for i, artist in enumerate(artists[:5])]
    return top_artists

def get_similar_artists(artist_name):
    api_key = os.environ.get('MUSIC_TOKEN')
    url = f"http://ws.audioscrobbler.com/2.0/?method=artist.getsimilar&artist={artist_name}&api_key={api_key}&format=json"
    response = requests.get(url)
    data = json.loads(response.text)
    if 'similarartists' in data and 'artist' in data['similarartists']:
        return [(artist['name'], urllib.parse.quote_plus(artist['url'])) for artist in data['similarartists']['artist']]
    else:
        return []

def get_similar_tracks(artist_name, track_name):
    api_key = os.environ.get('MUSIC_TOKEN')
    url = f"http://ws.audioscrobbler.com/2.0/?method=track.getsimilar&artist={artist_name}&track={track_name}&api_key={api_key}&format=json"
    response = requests.get(url)
    if response.status_code == 200:
        data = json.loads(response.content)
        if 'similartracks' in data and 'track' in data['similartracks']:
            tracks = data['similartracks']['track']
            return [f"<a href='{urllib.parse.quote_plus(track['url'])}'>{track['name']} - {track['artist']['name']}</a>\n" for track in tracks[:5]]
        else:
            return []
    else:
        return []

def explore_handler(artist, chat_id):
    insert_artists("artists", artist)
    random_songs_info = get_random_songs(artist)
    artist_info = get_artist_info(artist)
    songs_list = []
    for i, song_info in enumerate(random_songs_info, 1):
        song_name = song_info[0]
        url = song_info[1]
        songs_list.append(f"{i}. <a href='{url}'>{song_name}</a>")
    songs_list = "\n".join(songs_list)
    send_message(f"–ö–æ–Ω–µ—á–Ω–æ, –≤–æ—Ç, —á–µ–º —è –º–æ–≥—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è üëá\n\nüé∏ –û–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ:\n\n{artist_info}\n\nüöÄ –ü–æ–¥–±–æ—Ä–∫–∞ –ø–µ—Å–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist}:\n\n{songs_list}", chat_id)

def handler(event, context):

    message = json.loads(event['body'])
    chat_id = message['message']['chat']['id']
    reply = message['message']['text']

    if reply == "/start":
        start_message = "–ü—Ä–∏–≤–µ—Ç! –Ø –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –±–æ—Ç, —Ä–∞–±–æ—Ç–∞—é—â–∏–π –Ω–∞ –±–∞–∑–µ —Å–µ—Ä–≤–∏—Å–∞ Last.fm –∏ –ø–æ–º–æ–≥–∞—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —É–∑–Ω–∞–≤–∞—Ç—å –Ω–æ–≤–æ–µ –æ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–º –º–∏—Ä–µ. –í–æ—Ç –∫–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã —è —É–º–µ—é –≤—ã–ø–æ–ª–Ω—è—Ç—å:\n\n/start ‚Äì –ø—Ä–∏—à–ª—é –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ ü§ñ\n\n/explore ‚Äì —Ä–∞—Å—Å–∫–∞–∂—É –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–∫—Ç–æ–≤ –æ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ –∏ –ø—Ä–∏—à–ª—é –ø–æ–¥–±–æ—Ä–∫—É –µ–≥–æ –∫–æ–º–ø–æ–∑–∏—Ü–∏–π. –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: /explore Hurts üéß\n\n/genre ‚Äì –ø—Ä–∏—à–ª—é —Ç–æ–ø-5 –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –≤ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–º —Ç–µ–±—è –∂–∞–Ω—Ä–µ/–∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: /genre pop üî†\n\n/recommendArtists ‚Äì –ø–æ—Å–æ–≤–µ—Ç—É—é –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π, –ø–æ—Ö–æ–∂–∏—Ö –Ω–∞ —Ç–≤–æ–µ–≥–æ –ª—é–±–∏–º—á–∏–∫–∞. –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: /recommendArtists Sia üìù\n\n/similarSongs - –ø—Ä–∏—à–ª—é —Å–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω –ø–æ—Ö–æ–∂–∏—Ö, –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–π —Ç—Ä–µ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: /similarSongs Hurts - Wonderful Life üé∂"
        send_message(start_message, chat_id)

    elif reply.startswith("/explore"):
        artist = reply.split("/explore ", 1)
        if len(artist) < 2:
            send_message("–£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /explore. –ù–∞–ø—Ä–∏–º–µ—Ä, /explore The Beatles", chat_id)
        else:
            artist = artist[1]
            explore_handler(artist, chat_id)
    
    elif reply.startswith("/genre"):
        genre_reply = reply.split("/genre ", 1)
        if len(genre_reply) < 2:
            send_message("–ö–∞–∫–æ–π –≤–∞—à –ª—é–±–∏–º—ã–π –∂–∞–Ω—Ä? –û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /genre pop", chat_id)
        else:
            genre_reply = genre_reply[1]
            top_artists = get_genre_songs(genre_reply)
            send_message(f"–ù–∞—à–µ–ª! –í–æ—Ç —Ç–æ–ø-5 –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –≤ –∂–∞–Ω—Ä–µ {genre_reply}:\n\n{''.join(top_artists)}", chat_id)   
    
    elif reply.startswith("/recommendArtists"):
        artist_name = reply.split("/recommendArtists ", 1)[1]
        similar_artists = get_similar_artists(artist_name)
        if similar_artists:
            message = f"–Ø —Ç–æ–∂–µ –ª—é–±–ª—é {artist_name}, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—à—å? ü•∞ –î—É–º–∞—é, —Ç—ã –æ—Ü–µ–Ω–∏—à—å –ø–æ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤—É —Å–ª–µ–¥—É—é—â–∏—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π:\n\n"
            for i, artist in enumerate(similar_artists[:5]):
                message += f"{i+1}. {artist[0]} - {artist[1]}\n"
            send_message(message, chat_id)
        else:
            send_message(f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –Ω–∞ {artist_name}", chat_id)
    
    elif reply.startswith("/similarSongs"):
        args = reply.split("/similarSongs ", 1)[1].split(" - ")
        if len(args) < 2:
            send_message("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ —Ç—Ä–µ–∫–∞ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å. –ù–∞–ø—Ä–∏–º–µ—Ä, /similarSongs Hurts - Wonderful Life", chat_id)
        else:
            artist_name, track_name = args
            insert_similar("similar", artist_name, track_name)
            similar_tracks = get_similar_tracks(artist_name, track_name)
            if similar_tracks:
                message = f"–ê —Ç—ã –∑–Ω–∞–µ—à—å —Ç–æ–ª–∫ –≤ —Ö–æ—Ä–æ—à–µ–π –º—É–∑—ã–∫–µ! –í–æ—Ç —Å–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω, –ø–æ—Ö–æ–∂–∏—Ö –Ω–∞ {track_name} –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name}. –ù–∞–∂–º–∏ –Ω–∞ –ø–µ—Å–Ω—é, —á—Ç–æ–±—ã –ø–æ—Å–ª—É—à–∞—Ç—å –µ–µ –Ω–∞ last.fm üíÉ\n\n{''.join(similar_tracks)}"
                send_message(message, chat_id)
            else:
                send_message(f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏—Ö —Ç—Ä–µ–∫–æ–≤ –Ω–∞ {track_name} –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name}", chat_id)
                
    else:
        send_message("–ü—Ä–æ—Å—Ç–∏, —è –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω–∏–º–∞—é —á—Ç–æ —Ç—ã –∏–º–µ–µ—à—å –≤ –≤–∏–¥—É", chat_id)

    return {
        'statusCode': 200,
        'body': json.dumps('Message sent')
    }
